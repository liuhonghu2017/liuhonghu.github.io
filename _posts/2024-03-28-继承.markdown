---
layout: post
title: "继承的六种方式"
date: 2024-03-28 11:06:06 +0800
tags: JS
author: 阿浪
---

# 继承

### 1. 原型继承

> 原型链继承主要是利用原型对所有实例共享的特性来实现继承的。该继承方式主要有如下特点:

1. 原型在包含有引用类型的数据时, 会被所有的实例对象所共享, 容易造成修改的混乱。
2. 创建子类型的时候不能向超类型传递参数。
3. 实例属于子类不属于父类。

```js
// 子类
function Child(name, age) {
	this.name = name;
	this.age = age;
}

//原型对象
const Father = {
	colors: ["red", "blue"],
};

// 原型继承
Child.prototype = Father;
const child = new Child("randy", 26);
```

### 2. 构造继承

> 使用借用构造函数继承这种方式是通过在子类型的函数中调用父类型的构造函数来实现的。该继承方式有如下特点

1. 构造函数继承解决了不能向父类型传递参数的缺点。
2. 但是它存在的一个问题就是无法实现函数方法的复用, 就是父类方法在每个实例里面都会存在, 相较于原型继承浪费了存储空间。
3. 并且父类型原型上定义的方法子类型也没有办法访问到。
4. 实例属于子类不属于父类。

```js
// 父类
function Father(name, age) {
	this.name = name;
	this.age = age;
	this.fatherColors = ["green", "yellow"];
}

//子类
function Child(name, age, sex) {
	// 构造继承 可以传参 解决了不能向父类型传递参数的缺点
	Father.call(this, name, age);
	this.sex = sex;
}

const child = new Child("randy", 26, "male");
```

### 3. 组合继承

> 组合继承是将原型链继承和构造函数继承组合起来使用的一种方式。通过借用构造函数的方式来实现实例属性的继承, 通过将子类型的原型设置为父类的实例来实现原型属性的继承。该继承方式有如下特点

1. 这种方式解决了上面的两种模式单独使用时的问题。能向父类型传递参数, 能获取父类原型上的属性和方法。
2. 由于我们是以超类型的实例来作为子类型的原型, 所以调用了两次超类的构造函数。
3. 由于原型是父类实例, 所以实例对象的原型中多了很多不必要的属性（实例中有父类的方法和属性, 原型里面还有, 都是重复的）。
4. 实例对象既属于父类又属于子类。

```js
// 父类
function Father(name, age) {
	this.name = name;
	this.age = age;
	this.fatherColors = ["green", "yellow"];
}

//子类
function Child(name, age, sex) {
	// 构造继承
	Father.call(this, name, age);
	this.colors = ["red", "blue"];
	this.sex = sex;
}

// 原型继承
Child.prototype = new Father();
Child.prototype.constructor = Child;

const child = new Child("randy", 26, "male");
```

### 4. 寄生式继承

> 寄生式继承的思路是创建一个用于封装继承过程的函数, 通过传入一个对象, 然后创建一个新对象, 该对象的原型是传入的对象。然后对该新对象进行扩展, 最后返回这个新对象。这个扩展的过程就可以理解是一种继承。该继承方式有如下特点

1. 这种继承的优点就是对一个简单对象实现继承。
2. 没有办法实现函数的复用。
3. 传入对象会被作为新对象的原型, 会被所有的实例对象所共享, 容易造成修改的混乱。
4. 创建子类型的时候不能向超类型传递参数。
5. 实例是父类的实例。

```js
function CreateObj(obj) {
	// 把传进来的对象作为新创建对象的原型
	let newObj = Object.create(obj);
	// 简单的一些扩展
	newObj.colors = ["red", "blue"];

	return newObj;
}

function Father(name, age) {
	this.name = name;
	this.age = age;
	this.sayFather = function () {
		console.log("child sayFather", this.name, this.age);
	};
	this.fatherColors = ["green", "yellow"];
}

let child = CreateObj(new Father("randy", 24));
```

### 5. 寄生式组合继承

> 组合继承的缺点就是使用超类型的实例作为子类型的原型, 导致添加了不必要的原型属性。寄生式组合继承的方式是使用父类型的原型的副本来作为子类型的原型, 这样就避免了创建不必要的属性。该继承方式是组合继承的升级版, 有如下特点

1. 原型在包含有引用类型的数据时, 会被所有的实例对象所共享, 容易造成修改的混乱。
2. 创建子类型的时候能向超类型传递参数。
3. 实例对象不再臃肿, 原型只包含父类的原型。
4. 实例对象既属于父类又属于子类。

```js
function CreateObj(obj) {
	// 把传进来的对象作为新创建对象的原型
	let newObj = Object.create(obj);
	// 简单的一些扩展
	newObj.say = function () {
		console.log("say");
	};

	return newObj;
}

// 父类
function Father(name, age) {
	this.name = name;
	this.age = age;
	this.fatherColors = ["green", "yellow"];
}

//子类
function Child(name, age) {
	// 构造继承
	Father.call(this, name, age);
	this.colors = ["red", "blue"];
}

// 将父类原型传递过去, 创建一个新对象, 不再是父类的实例对象
const obj = CreateObj(Father.prototype);
// 寄生式组合继承 使用新对象作为子类的原型
Child.prototype = obj;
Child.prototype.constructor = Child;
const child = new Child("randy", 26);
```

### 6. 类继承(class extends 继承)

> 从上面 class 的介绍我们知道, 只有方法才会被挂载到原型上, 这是寄生式组合继承的升级版, 除了有寄生式组合继承的优点外还解决了原型修改混乱的问题。这应该是最佳的继承方式了

1. 创建子类型的时候能向超类型传递参数。
2. 实例既属于子类又属于父类。
3. 实例对象不再臃肿, 原型只包含父类的原型。

```js
class Father {
	constructor(name, age) {
		// 构造函数里面的属性或方法都会在子类实例上
		this.name = name;
		this.age = age;
	}

	// 父类方法会被挂载到原型的原型上
	sayFather() {
		console.log("child sayFather", this.name, this.age);
	}
}

// 子类继承
class Child extends Father {
	_colors = ["blue", "red"];

	constructor(name, age, sex) {
		// 没参数
		// super();
		// 有参数
		super(name, age);
		this.sex = sex;
	}

	// 方法会挂载到原型上
	say() {
		console.log("child say", this.name, this.age, this.sex);
	}
}

const child = new Child("randy", 24, "male");
```
